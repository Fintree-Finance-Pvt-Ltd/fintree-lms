// /server/services/cibilPdfService.js
const fs = require('fs');
const path = require('path');
const { XMLParser } = require('fast-xml-parser');
const puppeteer = require('puppeteer');
const db = require('../config/db');

function makeOutputPath(lan) {
  const outDir = path.join(__dirname, "../uploads");   // ← your exact folder
  if (!fs.existsSync(outDir)) fs.mkdirSync(outDir, { recursive: true });
  const filename = `EXPERIAN_CIBIL_${lan || 'NA'}_${Date.now()}.pdf`;
  const filePath = path.join(outDir, filename);
  return { filename, filePath };
}

function parseXml(xml) {
  const parser = new XMLParser({
    ignoreAttributes: false,
    attributeNamePrefix: '',
    trimValues: true,
  });
  return parser.parse(xml);
}

function mapFields(x) {
  const r = x?.INProfileResponse || {};
  const hdr = r?.CreditProfileHeader || {};
  const score = r?.SCORE || {};
  const cur = r?.Current_Application?.Current_Application_Details || {};
  const appl = cur?.Current_Applicant_Details || {};
  const addr = cur?.Current_Applicant_Address_Details || {};
  const cais = r?.CAIS_Account?.CAIS_Account_DETAILS || {};
  const holder = cais?.CAIS_Holder_Details || {};
  const phone = cais?.CAIS_Holder_Phone_Details || {};

  const name = `${appl.First_Name || ''} ${appl.Middle_Name1 || ''} ${appl.Last_Name || ''}`.replace(/\s+/g,' ').trim();
  const address = [
    addr.FlatNoPlotNoHouseNo,
    addr.BldgNoSocietyName,
    addr.RoadNoNameAreaLocality,
    addr.City,
    addr.State,
    addr.PINCode
  ].filter(Boolean).join(', ');

  return {
    reportDate: hdr.ReportDate,
    reportTime: hdr.ReportTime,
    reportNumber: hdr.ReportNumber,
    bureau: hdr.Subscriber_Name,
    name,
    dob: appl.Date_Of_Birth_Applicant || r?.CAIS_Account?.CAIS_Account_DETAILS?.CAIS_Holder_Details?.Date_of_birth,
    pan: appl.IncomeTaxPan || holder?.Income_TAX_PAN,
    mobile: appl.Telephone_Number_Applicant_1st || phone?.Mobile_Telephone_Number,
    address,
    score: score.BureauScore,
    accNo: cais?.Account_Number,
    openDate: cais?.Open_Date,
    status: cais?.Account_Status,
    type: cais?.Account_Type,
    bal: cais?.Current_Balance,
  };
}

function html(fields) {
  const S = (v) => (v ? String(v) : '-');
  return `<!doctype html><html><head><meta charset="utf-8">
  <style>
    body{font-family:Arial,Helvetica,sans-serif;margin:24px;color:#222;font-size:12px}
    .header{border-bottom:2px solid #000;padding-bottom:8px;margin-bottom:12px}
    .title{font-size:18px;font-weight:700}
    .meta{margin-top:6px;display:flex;gap:24px;flex-wrap:wrap}
    .sec{margin:12px 0}.sec h3{margin:0 0 6px;font-size:14px;border-bottom:1px solid #999;padding-bottom:4px}
    .box{border:1px solid #bbb;padding:10px;border-radius:4px}
    .grid{display:grid;grid-template-columns:160px 1fr 160px 1fr;gap:6px 12px}
    table{width:100%;border-collapse:collapse}th,td{border:1px solid #bbb;padding:6px}th{background:#eee}
  </style></head><body>
    <div class="header">
      <div class="title">Experian Credit Report</div>
      <div class="meta">
        <div><b>Date/Time:</b> ${S(fields.reportDate)} ${S(fields.reportTime)}</div>
        <div><b>Bureau Member:</b> ${S(fields.bureau)}</div>
        <div><b>Report #:</b> ${S(fields.reportNumber)}</div>
      </div>
    </div>

    <div class="sec box">
      <h3>Applicant Details</h3>
      <div class="grid">
        <div>Name</div><div>${S(fields.name)}</div>
        <div>Date of Birth</div><div>${S(fields.dob)}</div>
        <div>PAN</div><div>${S(fields.pan)}</div>
        <div>Mobile</div><div>${S(fields.mobile)}</div>
        <div>Address</div><div style="grid-column:span 3">${S(fields.address)}</div>
      </div>
    </div>

    <div class="sec box">
      <h3>Score</h3>
      <div><b>Bureau Score:</b> ${S(fields.score)}</div>
    </div>

    <div class="sec box">
      <h3>Account Summary</h3>
      <table>
        <thead><tr><th>Account No</th><th>Open Date</th><th>Status</th><th>Type</th><th>Current Balance</th></tr></thead>
        <tbody><tr>
          <td>${S(fields.accNo)}</td>
          <td>${S(fields.openDate)}</td>
          <td>${S(fields.status)}</td>
          <td>${S(fields.type)}</td>
          <td>${S(fields.bal)}</td>
        </tr></tbody>
      </table>
    </div>

    <div style="margin-top:16px;font-size:10px;color:#666">Generated by system.</div>
  </body></html>`;
}

async function generatePdf(outPath, htmlStr) {
  const browser = await puppeteer.launch({ args: ['--no-sandbox','--disable-setuid-sandbox'] });
  try {
    const page = await browser.newPage();
    await page.setContent(htmlStr, { waitUntil: 'networkidle0' });
    await page.pdf({
      path: outPath,
      format: 'A4',
      printBackground: true,
      margin: { top:'12mm', right:'12mm', bottom:'12mm', left:'12mm' }
    });
  } finally {
    await browser.close();
  }
}

/**
 * Generate for a single report row by ID (idempotent)
 * Tables:
 *   - loan_cibil_reports: id, lan, report_xml, pdf_generated
 *   - loan_documents: id, lan, doc_name, source_url, doc_password, file_name, original_name, meta_json, uploaded_at
 */
async function generateForReport(reportId) {
  const conn = db.promise();
  const c = await conn.getConnection();
  try {
    await c.beginTransaction();

    const [rows] = await c.query('SELECT * FROM loan_cibil_reports WHERE id = ? FOR UPDATE', [reportId]);
    if (!rows.length) throw new Error('report not found');
    const r = rows[0];

    if (Number(r.pdf_generated) === 1) { await c.commit(); return { skipped: true }; }

    const data = parseXml(r.report_xml);
    const fields = mapFields(data);
    const { filename, filePath } = makeOutputPath(r.lan);

    await generatePdf(filePath, html(fields));

    // Insert into loan_documents (store just the filename like your existing rows)
    await c.query(
      `INSERT INTO loan_documents (lan, doc_name, file_name, original_name, uploaded_at)
       VALUES (?, ?, ?, ?, NOW())`,
      [
        r.lan,
        'CIBIL_REPORT',                               // doc_name
        filename,                                     // file_name (your table stores the filename)
        `CIBIL Report - ${r.lan || 'N/A'}.pdf`        // original_name (nice display name)
      ]
    );

    await c.query('UPDATE loan_cibil_reports SET pdf_generated = 1 WHERE id = ?', [r.id]);
    await c.commit();

    return {
      file_name: filename,
      // Your app resolves files from /uploads with express.static; if you need a URL:
      url: `/uploads/${filename}`
    };
  } catch (e) {
    await c.rollback();
    throw e;
  } finally {
    c.release();
  }
}

// Bulk (for cron): do N pending items
async function generateAllPending(limit = 150) {
  const conn = db.promise();
  const [rows] = await conn.query(
    'SELECT id FROM loan_cibil_reports WHERE pdf_generated = 0 ORDER BY id ASC LIMIT ?',
    [limit]
  );
  const out = [];
  for (const row of rows) {
    try {
      const res = await generateForReport(row.id);
      out.push({ id: row.id, ok: true, ...res });
    } catch (err) {
      out.push({ id: row.id, ok: false, error: err.message });
    }
  }
  return out;
}

module.exports = { generateForReport, generateAllPending };
